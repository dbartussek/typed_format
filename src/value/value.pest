WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{
    ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE )
    | ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}

/// Type parsing

identifier = {
    (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*)
    | ("_" ~ (ASCII_ALPHANUMERIC | "_")*)
}

generic_identifier = { identifier ~ generics? }
generics = { "<" ~ (generic_type ~ ",")* ~ generic_type ~ ">" }
type_identifier = { generic_identifier ~ ("::" ~ generic_identifier)* }

array_type = { "[" ~ generic_type ~ ";" ~ array_size ~ "]" }
array_size = @{ "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

tuple_type = { "(" ~ (generic_type ~ ",")* ~ generic_type? ~ ")" }

generic_type = { type_identifier | array_type | tuple_type }

/// Bool values

boolean = _{ bool_true | bool_false }
bool_true = { "true" }
bool_false = { "false" }

/// Option values

option = _{ some | none }
some = { "Some" ~ "(" ~ value ~ ")" }
none = { "None" }

/// Strings and chars

generic_escape = _{ "\\" ~ ("\\" | "n" | "r" | "t" | "0") }

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ string_char* }
string_char = _{
    !("\"" | "\\") ~ ANY
    | generic_escape
    | "\\" ~ "\""
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

value_char = ${ "'" ~ char_inner ~ "'"}
char_inner = {
    !("'" | "\\") ~ ANY
    | generic_escape
    | "\\" ~ "'"
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

raw_string = ${
    "r" ~ PUSH("#"*) ~ "\""
    ~ raw_string_inner
    ~ "\"" ~ POP
}
raw_string_inner = @{
    (
        !("\"" ~ PEEK)
        ~ ANY
    )*
}

/// Numbers

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

/// Tuples and lists

unit = { "(" ~ ")" }

tuple = { "(" ~ tuple_inner ~ ")" }
tuple_inner = _{ ( value ~ "," )* ~ value? }
tuple_struct = { type_identifier ~ tuple }
list = { "[" ~ tuple_inner ~ "]" }

/// Structs

named_tuple = { "(" ~ (named_tuple_entry ~ ",")* ~ named_tuple_entry? ~ ")"}
named_tuple_entry = { identifier ~ ":" ~ value }
named_struct = { type_identifier ~ named_tuple }

/// Map

map_entry = { value ~ ":" ~ value }
map = { "{" ~ (map_entry ~ ",")* ~ map_entry? ~ "}" }

/// The one value rule

value = _{
    unit

    | boolean
    | option

    | tuple_struct
    | named_struct

    | generic_type

    | tuple

    | map
    | list

    | string | raw_string
    | value_char

    | number
}

/// Entry rules

main_value = _{ SOI ~ value ~ EOI}
main_type_identifier = _{ SOI ~ type_identifier ~ EOI}
main_type = _{ SOI ~ generic_type ~ EOI}
